React Components are the building blocks of React application.
by default, React application creates a root component called App.
A component is a small, reusable piece of code that represents a UI element. components are flexible, modular and reusable
React Provides two kinds of components
 i. functional components:
    what is a functional component?
       functional component also called stateless component that are simple components which receives props and returns JSX.
    How to create our own functional components?
       create a file functional-component-name.jsx and add a function which return an UI and export the function
       const Header = () =>
       {
        return (
        <h2>My Website</h2>
        )
       } 
       export default Header
       It is recommanded to have same name for component similar to file name. 
    Inside SRC, create a file with properNAME(starts with uppercase letter), you can keep all pcomponents in one single application
    How to use functional components?
      import functional components into other components and use them as HTML elements
    nested components:
       A component inside another component is called nested component
          //App.jsx
          <Header />
     
     props: props are used to send the values from parent components to child component. props is shortform of "properties"
     we send properties as attributes and receives the properties as parameters of function
     eg:
       //App.jsx
       <Header name="PRASAD" />
       //Header.jsx
       function Header(props){
         return (
            <h2>{props.name}</p>
         )

       }

       props is always an object of properties

       state:  In React state refers to the data that changes within a component. state is an object that stores the components dynamic data.

        state is necessary because react components are designed for reusability and dynamic , when a component data changes, react will re render component to reflext the new data. state is used to keep track of the data and re render the component

        How to use state in functional components?
          functional components are called stateless components because they cannot implement state directly so they use a hook called useState
          import {useState} from 'react

          const [value,setValue]= useState(initialvalue)
          value -- data which is printing on screen
          setValue -- is a method to update state and re render the component
          initialvalue contains default value
          useState is a hook(function) provided by react

           eg: import react,{useState} from 'react'
           function Counter(){
            const [count,setCount]= useState(0);
            return(
               <div>
               <p>Count:{count}</p>
               <button onClick={()=>setCount(count+1)}>increment</button>
               </div>
            )
           }
          export default Counter;

 ii. class components: class components are the stateful components and they use render method to render the UI and for render method they use Component and extends It.
 In legacy code, class components have higher preference since they haveIn built state. Also they have default life cycle methods

  # React Class Components - Complete Guide

## What are Class Components?
Class components are ES6 classes that extend from React.Component and implement a render method. They were the primary way of creating components in React before hooks were introduced. Class components are also known as "stateful components" because they can maintain their own state.

## Basic Structure
import React, { Component } from 'react';

class MyComponent extends Component {
  render() {
    return (
      <div>
        <h1>Hello from Class Component</h1>
      </div>
    );
  }
}

export default MyComponent;
```

## Props in Class Components
Props are accessed using `this.props` in class components. They are available throughout the component.

class Greeting extends Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

// Usage:
// <Greeting name="John" />
```

## State in Class Components
Unlike functional components that use useState hook, class components have a built-in state object.

class Counter extends Component {
  constructor(props) {
    super(props);
    // Initialize state in constructor
    this.state = {
      count: 0
    };
  }

  // Update state using setState method
  incrementCount = () => {
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={this.incrementCount}>Increment</button>
      </div>
    );
  }
}
```

### Important Notes about State:
1. Always use `setState()` to update state, never modify state directly
2. State updates may be asynchronous
3. State updates are merged

## Lifecycle Methods
Class components have several lifecycle methods that get called at different stages of a component's life.

### 1. Mounting Phase
class LifecycleDemo extends Component {
  constructor(props) {
    super(props);
    // Called when component is initialized
    this.state = { data: null };
  }

  componentDidMount() {
    // Called after component is mounted to the DOM
    // Perfect for API calls
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => this.setState({ data }));
  }
}
```

### 2. Updating Phase
class UpdateDemo extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    // Control if component should re-render
    return this.props.value !== nextProps.value;
  }

  componentDidUpdate(prevProps, prevState) {
    // Called after component updates
    if (this.props.userId !== prevProps.userId) {
      this.fetchUserData();
    }
  }
}
```

### 3. Unmounting Phase
class UnmountDemo extends Component {
  componentWillUnmount() {
    // Clean up (remove event listeners, cancel subscriptions)
    // Called right before component is removed from DOM
  }
}
```

## Complete Example with Multiple Features
class UserDashboard extends Component {
  constructor(props) {
    super(props);
    this.state = {
      user: null,
      posts: [],
      loading: true,
      error: null
    };
  }

  componentDidMount() {
    // Fetch user data when component mounts
    this.fetchUserData();
  }

  componentDidUpdate(prevProps) {
    // If userId prop changes, fetch new user data
    if (this.props.userId !== prevProps.userId) {
      this.fetchUserData();
    }
  }

  componentWillUnmount() {
    // Clean up any subscriptions/timers
    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }
  }

  fetchUserData = async () => {
    try {
      const response = await fetch(`/api/users/${this.props.userId}`);
      const userData = await response.json();
      this.setState({ 
        user: userData,
        loading: false 
      });
    } catch (error) {
      this.setState({ 
        error: 'Failed to fetch user data',
        loading: false 
      });
    }
  }

  handleLogout = () => {
    this.setState({ user: null });
    this.props.onLogout();
  }

  render() {
    const { user, loading, error } = this.state;

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!user) return <div>No user found</div>;

    return (
      <div className="dashboard">
        <h1>Welcome, {user.name}</h1>
        <div className="user-info">
          <p>Email: {user.email}</p>
          <p>Member since: {user.joinDate}</p>
        </div>
        <button onClick={this.handleLogout}>Logout</button>
      </div>
    );
  }
}
```

## Key Differences from Functional Components
1. Class components use `this` keyword to refer to the component instance
2. State is handled through a single `state` object and `setState` method
3. Lifecycle methods are available instead of hooks
4. Props are accessed through `this.props`
5. Event handlers typically need to be bound in constructor or used as arrow functions

## When to Use Class Components
While functional components with hooks are now preferred, you might still need class components when:
1. Working with legacy code
2. Using older libraries that depend on lifecycle methods
3. Working in codebases that standardized on class components
4. Need to use features that don't have hook equivalents (rare)

## Best Practices
1. Always initialize state in the constructor
2. Use `setState` for state updates
3. Bind event handlers in constructor or use arrow functions
4. Clean up subscriptions and event listeners in componentWillUnmount
5. Use shouldComponentUpdate for performance optimization
6. Keep render method pure
7. Don't call setState in componentDidMount unless necessary








 